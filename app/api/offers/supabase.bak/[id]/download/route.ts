import { NextRequest, NextResponse } from 'next/server'
import { requireAuth } from '@/lib/api-helpers'
import { createClient } from '@/lib/supabase/server'
import { storageService } from '@/lib/storage-supabase'

interface Props {
  params: Promise<{ id: string }>
}

interface OfferWithListing {
  id: string
  offerPriceInCents: number
  quantity: number
  paidAt: string
  listing: {
    title: string
  }
  buyer: {
    username: string
  }
}

// GET /api/offers/supabase/[id]/download - Download ticket after payment
export async function GET(request: NextRequest, { params }: Props) {
  const { id } = await params
  try {
    const user = await requireAuth()

    const supabase = await createClient()
    
    // Get offer with listing info
    const { data: offer, error } = await supabase
      .from('offers')
      .select(`
        *,
        listing:listings (
          id,
          title,
          ticketPath,
          originalFileName,
          user:users!userId (
            id,
            username
          )
        ),
        buyer:users!buyerId (
          id,
          username
        )
      `)
      .eq('id', id)
      .single()

    if (error || !offer) {
      return NextResponse.json(
        { error: 'Offer not found' },
        { status: 404 }
      )
    }

    // Check if user is the buyer
    if (offer.buyerId !== user.id) {
      return NextResponse.json(
        { error: 'Only the buyer can download tickets' },
        { status: 403 }
      )
    }

    // Check if offer is paid
    if (!offer.isPaid || offer.status !== 'completed') {
      return NextResponse.json(
        { error: 'Tickets can only be downloaded after payment is completed' },
        { status: 400 }
      )
    }

    // Check if listing has a ticket file
    if (!offer.listing.ticketPath) {
      // Generate a mock ticket if no file was uploaded
      const mockTicketContent = generateMockTicket(offer)
      
      return new NextResponse(mockTicketContent, {
        status: 200,
        headers: {
          'Content-Type': 'text/plain',
          'Content-Disposition': `attachment; filename="${offer.listing.title.replace(/[^a-zA-Z0-9]/g, '_')}_ticket.txt"`
        }
      })
    }

    // Get signed download URL from Supabase Storage
    const downloadUrl = await storageService.getFileUrl(offer.listing.ticketPath, 300) // 5 minute expiry

    if (!downloadUrl) {
      return NextResponse.json(
        { error: 'Failed to generate download link' },
        { status: 500 }
      )
    }

    // Redirect to the signed URL for direct download
    return NextResponse.redirect(downloadUrl)

  } catch (error) {
    console.error('Download ticket error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

function generateMockTicket(offer: OfferWithListing): string {
  return `
TICKET CONFIRMATION
==================

Event: ${offer.listing.title}
Buyer: ${offer.buyer.username}
Order ID: ${offer.id}
Quantity: ${offer.quantity}
Price: $${(offer.offerPriceInCents / 100).toFixed(2)}
Purchase Date: ${new Date(offer.paidAt).toLocaleDateString()}

INSTRUCTIONS:
- Present this confirmation at the venue
- Bring valid ID matching the buyer name
- Arrive 30 minutes before event start

Thank you for your purchase!

Generated by Ticket Marketplace
Transaction ID: ${offer.id}
`.trim()
}