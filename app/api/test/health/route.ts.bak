import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'
import { supabaseAdmin } from '@/lib/auth-server'

export async function GET(request: NextRequest) {
  const diagnostics: any = {
    timestamp: new Date().toISOString(),
    checks: {}
  }

  // Check environment variables
  diagnostics.checks.env = {
    hasSupabaseUrl: !!process.env.NEXT_PUBLIC_SUPABASE_URL,
    hasSupabaseAnonKey: !!process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    hasServiceRoleKey: !!process.env.SUPABASE_SERVICE_ROLE_KEY,
    hasDatabaseUrl: !!process.env.DATABASE_URL,
    nodeEnv: process.env.NODE_ENV
  }

  // Test Supabase connection
  try {
    const supabase = await createClient()
    const { data, error } = await supabase.from('users').select('count').limit(1)
    diagnostics.checks.supabaseConnection = {
      success: !error,
      error: error?.message || null
    }
  } catch (e) {
    diagnostics.checks.supabaseConnection = {
      success: false,
      error: e instanceof Error ? e.message : 'Unknown error'
    }
  }

  // Test admin client
  try {
    const { data, error } = await supabaseAdmin.from('users').select('count').limit(1)
    diagnostics.checks.adminClient = {
      success: !error,
      error: error?.message || null
    }
  } catch (e) {
    diagnostics.checks.adminClient = {
      success: false,
      error: e instanceof Error ? e.message : 'Unknown error'
    }
  }

  // Test auth
  try {
    const supabase = await createClient()
    const { data: { user }, error } = await supabase.auth.getUser()
    diagnostics.checks.auth = {
      hasUser: !!user,
      userId: user?.id || null,
      error: error?.message || null
    }
  } catch (e) {
    diagnostics.checks.auth = {
      hasUser: false,
      error: e instanceof Error ? e.message : 'Unknown error'
    }
  }

  return NextResponse.json(diagnostics)
}