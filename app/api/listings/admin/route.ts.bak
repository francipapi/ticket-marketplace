import { NextRequest, NextResponse } from 'next/server'
import { createResponse, createErrorResponse, requireAuth } from '@/lib/api-helpers'
import { supabaseAdmin } from '@/lib/auth-server'
import { z } from 'zod'

const createListingSchema = z.object({
  title: z.string().min(3).max(100),
  eventName: z.string().min(3),
  eventDate: z.string().datetime(),
  venue: z.string().optional(),
  priceInCents: z.number().min(100), // Minimum $1.00
  quantity: z.number().min(1).max(10),
  description: z.string().optional(),
})

// POST /api/listings/admin - Create new listing using admin client (bypasses RLS)
export async function POST(request: NextRequest) {
  try {
    // First try to get the current user, but handle if they don't exist in our DB
    let user = null;
    try {
      user = await requireAuth()
    } catch (error) {
      console.log('requireAuth failed, trying alternate approach...')
      
      // Get the auth user directly
      const { createClient } = await import('@/lib/supabase/server')
      const supabase = await createClient()
      const { data: { user: authUser } } = await supabase.auth.getUser()
      
      if (!authUser) {
        return createErrorResponse('Not authenticated', 401)
      }
      
      // Try to find or create the user record
      const { data: existingUser } = await supabaseAdmin
        .from('users')
        .select('*')
        .eq('supabaseId', authUser.id)
        .maybeSingle()
      
      if (!existingUser) {
        // Create the user record
        const username = authUser.email!.split('@')[0] + '_' + Date.now()
        const { data: newUser, error: createError } = await supabaseAdmin
          .from('users')
          .insert({
            supabaseId: authUser.id,
            email: authUser.email!,
            username: username,
            migrationStatus: 'direct_signup'
          })
          .select()
          .single()
        
        if (createError) {
          console.error('Failed to create user record:', createError)
          return createErrorResponse('Failed to create user record', 500)
        }
        
        user = {
          id: newUser.id,
          supabaseId: newUser.supabaseId,
          email: newUser.email,
          username: newUser.username,
          createdAt: new Date(newUser.createdAt),
          updatedAt: new Date(newUser.updatedAt),
          migrationStatus: newUser.migrationStatus
        }
      } else {
        user = {
          id: existingUser.id,
          supabaseId: existingUser.supabaseId,
          email: existingUser.email,
          username: existingUser.username,
          createdAt: new Date(existingUser.createdAt),
          updatedAt: new Date(existingUser.updatedAt),
          migrationStatus: existingUser.migrationStatus
        }
      }
    }
    
    if (!user) {
      return createErrorResponse('Failed to get user information', 500)
    }

    const body = await request.json()
    const validatedData = createListingSchema.parse(body)

    // Convert eventDate string to Date object
    const eventDate = new Date(validatedData.eventDate)

    console.log('Creating listing with admin client for user:', user.id)

    // Use admin client to bypass RLS
    const { data: listing, error } = await supabaseAdmin
      .from('listings')
      .insert({
        userId: user.id,
        title: validatedData.title,
        eventName: validatedData.eventName,
        eventDate: eventDate.toISOString(),
        venue: validatedData.venue,
        priceInCents: validatedData.priceInCents,
        quantity: validatedData.quantity,
        description: validatedData.description,
        status: 'active'
      })
      .select()
      .single()

    if (error) {
      console.error('Create listing error (admin):', {
        error,
        code: error.code,
        message: error.message,
        details: error.details,
        hint: error.hint
      })
      
      return NextResponse.json(
        { error: error.message || 'Failed to create listing' },
        { status: 500 }
      )
    }

    console.log('Listing created successfully:', listing)

    return createResponse({
      message: 'Listing created successfully',
      listing
    })

  } catch (error) {
    console.error('Create listing error:', error)
    
    if (error instanceof z.ZodError) {
      return createErrorResponse('Invalid input: ' + error.errors.map(e => e.message).join(', '), 400)
    }

    return createErrorResponse('Internal server error', 500)
  }
}