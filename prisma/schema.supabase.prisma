// Supabase PostgreSQL schema for Phase 1 migration
// This schema is designed for production use with Supabase

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client-supabase"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - integrates with Supabase Auth
model User {
  id              String   @id @default(uuid())
  supabaseId      String?  @unique  // Link to auth.users table
  email           String   @unique
  username        String   @unique
  // Note: passwordHash removed - Supabase Auth handles this
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Migration tracking
  migratedAt      DateTime?
  migrationStatus String   @default("pending") // pending, migrated, failed
  migratedFromId  String?  // Original Phase 0 user ID
  
  // Relations
  listings        Listing[]
  sentOffers      Offer[]   @relation("BuyerOffers")
  
  @@map("users")
  @@index([email])
  @@index([username])
  @@index([supabaseId])
}

model Listing {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  eventName   String
  eventDate   DateTime
  venue       String?
  priceInCents Int     // Store in cents to avoid float precision issues
  quantity    Int
  description String?
  
  // File handling - Supabase Storage paths
  ticketPath      String?    // e.g., "tickets/user-id/listing-id/file.pdf"
  originalFileName String?
  fileType        String?
  fileSize        Int?
  
  status      String   @default("active") // active, inactive, sold, deleted
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Migration tracking  
  migratedAt      DateTime?
  migratedFromId  String?  // Original Phase 0 listing ID
  
  offers      Offer[]
  
  @@map("listings")
  @@index([userId])
  @@index([status])
  @@index([eventDate])
  @@index([eventName])
}

model Offer {
  id           String   @id @default(uuid())
  listingId    String
  listing      Listing  @relation(fields: [listingId], references: [id], onDelete: Cascade)
  buyerId      String
  buyer        User     @relation("BuyerOffers", fields: [buyerId], references: [id], onDelete: Cascade)
  
  offerPriceInCents Int // Offer price in cents
  quantity     Int
  messageTemplate String // 'asking_price', 'make_offer', 'check_availability'
  customMessage String? // For 'make_offer' type
  
  status       String   @default("pending") // pending, accepted, rejected, expired
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Mock payment data - will become separate Transaction model later
  isPaid       Boolean  @default(false)
  paidAt       DateTime?
  
  // Migration tracking
  migratedAt      DateTime?
  migratedFromId  String?  // Original Phase 0 offer ID
  
  @@map("offers")
  @@index([listingId])
  @@index([buyerId])
  @@index([status])
  @@index([createdAt])
}

// Migration tracking table
model MigrationLog {
  id        String   @id @default(uuid())
  tableName String
  recordId  String
  oldId     String?  // Original Phase 0 ID
  newId     String?  // New Phase 1 ID
  status    String   // pending, completed, failed
  error     String?
  createdAt DateTime @default(now())
  
  @@map("migration_logs")
  @@index([tableName])
  @@index([status])
}

// Profiles table to extend Supabase auth.users
model Profile {
  id        String   @id // This will be the same as auth.users.id
  username  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("profiles")
}